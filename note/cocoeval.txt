class COCOeval:
    ...

    def evaluateImg(self, imgId, catId, aRng, maxDet):
        '''
        perform evaluation for single category and image
        :return: dict (single image results)
        imgId: single id image
        catId: single category
        aRng: area
        maxDet: 100
        '''
        p = self.params
        if p.useCats:
            gt = self._gts[imgId,catId]
            dt = self._dts[imgId,catId]
        else:
            gt = [_ for cId in p.catIds for _ in self._gts[imgId,cId]]
            dt = [_ for cId in p.catIds for _ in self._dts[imgId,cId]]
        if len(gt) == 0 and len(dt) ==0:
            return None

        for g in gt:
            if g['ignore'] or (g['area']<aRng[0] or g['area']>aRng[1]):
                g['_ignore'] = 1
            else:
                g['_ignore'] = 0

        # sort dt highest score first, sort gt ignore last
        gtind = np.argsort([g['_ignore'] for g in gt], kind='mergesort') # id of sorted gt
        gt = [gt[i] for i in gtind] # gt after sorted
        dtind = np.argsort([-d['score'] for d in dt], kind='mergesort') # id of sorted gt
        dt = [dt[i] for i in dtind[0:maxDet]] # dt after sorted and limited
        iscrowd = [int(o['iscrowd']) for o in gt] # iscrowd in gt, if iscrowd => allow to match mutiple?
        # load computed ious
        ious = self.ious[imgId, catId][:, gtind] if len(self.ious[imgId, catId]) > 0 else self.ious[imgId, catId]
            # get ious shape [len dt, len gt] of [imgID, catID]

        T = len(p.iouThrs) # auto 10 threshold
        G = len(gt)
        D = len(dt)
        gtm  = np.zeros((T,G)) # each element is dtind of matched det
        dtm  = np.zeros((T,D)) # each element is gtind of matched gt
        gtIg = np.array([g['_ignore'] for g in gt]) # flag of ignored gt
        dtIg = np.zeros((T,D)) # 1 if det is not valid
        if not len(ious)==0:
            for tind, t in enumerate(p.iouThrs): # each t is an iou threshold
                for dind, d in enumerate(dt):
                    # information about best match so far (m=-1 -> unmatched)
                    iou = min([t,1-1e-10]) # equal to t 
                    # Given a det, loop through list of gt to find a best match
                    #
                    m = -1 # index of best match gt
                    for gind, g in enumerate(gt):
                        # if this gt already matched, and not a crowd, continue
                        if gtm[tind,gind]>0 and not iscrowd[gind]:
                            continue
                        # if dt already matched to unignored gt, and now match on ignore gt, stop
                        # since sorted gt ignore last => only after consider unignored gts first 
                        if m>-1 and gtIg[m]==0 and gtIg[gind]==1:
                            break
                        # continue to next gt unless better match made
                        if ious[dind,gind] < iou:
                            continue
                        # if match successful and best so far, store appropriately
                        iou=ious[dind,gind] 
                            # initial, ious is threshold in [0.5, 0.55, ....]
                            # then ious is best iou so far of det and gt
                        m=gind
                    # if match made store id of match for both dt and gt
                    if m ==-1:
                        continue
                    dtIg[tind,dind] = gtIg[m] # if matched with ig
                    dtm[tind,dind]  = gt[m]['id']
                    gtm[tind,m]     = d['id']
        # set unmatched detections outside of area range to ignore
        a = np.array([d['area']<aRng[0] or d['area']>aRng[1] for d in dt]).reshape((1, len(dt)))
        dtIg = np.logical_or(dtIg, np.logical_and(dtm==0, np.repeat(a,T,0)))
        # store results for given image and category
        return {
                'image_id':     imgId,
                'category_id':  catId,
                'aRng':         aRng,
                'maxDet':       maxDet,
                'dtIds':        [d['id'] for d in dt],
                'gtIds':        [g['id'] for g in gt],
                'dtMatches':    dtm,
                'gtMatches':    gtm,
                'dtScores':     [d['score'] for d in dt],
                'gtIgnore':     gtIg,
                'dtIgnore':     dtIg,
            }